// Chargement dynamique des fichiers de langue avec support des traductions utilisateur
export async function loadLocales(): Promise<Record<string, any>> {
  console.log('üåç D√©but du chargement des traductions...');

  if (typeof window !== 'undefined' && (window as any).electronAPI) {
    // Electron renderer avec APIs s√©curis√©es
    console.log('üîß Mode Electron d√©tect√© avec APIs s√©curis√©es');
    const electronAPI = (window as any).electronAPI;
    const processInfo = await electronAPI.getProcessInfo();

    console.log("üìÅ Chemin de l'ex√©cutable:", processInfo.execPath);
    console.log('üìÅ Dossier de travail:', processInfo.cwd);

    // D√©finir les dossiers de traductions (utilisateur + application)
    let userLocalesDir = '';
    let appLocalesDir = '';

    if (processInfo.env.NODE_ENV === 'development') {
      // En d√©veloppement - utiliser public/locales
      appLocalesDir = await electronAPI.pathJoin(
        processInfo.cwd,
        'public',
        'locales',
      );
      userLocalesDir = await electronAPI.pathJoin(
        processInfo.cwd,
        'user-translations',
      );
    } else {
      // En production - dossier utilisateur √† c√¥t√© de l'ex√©cutable pour que les joueurs puissent y acc√©der
      userLocalesDir = await electronAPI.pathJoin(
        await electronAPI.pathDirname(processInfo.execPath),
        'translations',
      );
      appLocalesDir = await electronAPI.pathJoin(
        await electronAPI.pathDirname(processInfo.execPath),
        'resources',
        'locales',
      );
    }

    console.log('üì¶ Dossier traductions application:', appLocalesDir);
    console.log('üë§ Dossier traductions utilisateur:', userLocalesDir);

    // Cr√©er le dossier utilisateur s'il n'existe pas
    if (!(await electronAPI.existsSync(userLocalesDir))) {
      try {
        await electronAPI.mkdirSync(userLocalesDir);
        console.log('üìÅ Dossier traductions utilisateur cr√©√©:', userLocalesDir);

        // Copier les traductions par d√©faut si le dossier application existe
        if (await electronAPI.existsSync(appLocalesDir)) {
          const appFiles = (
            await electronAPI.readdirSync(appLocalesDir)
          ).filter((f: string) => f.endsWith('.json'));
          for (const file of appFiles) {
            const srcPath = await electronAPI.pathJoin(appLocalesDir, file);
            const destPath = await electronAPI.pathJoin(userLocalesDir, file);
            if (!(await electronAPI.existsSync(destPath))) {
              await electronAPI.copyFileSync(srcPath, destPath);
              console.log(`üìã Copi√© ${file} vers le dossier utilisateur`);
            }
          }

          // Cr√©er un fichier README pour expliquer aux utilisateurs
          const readmePath = await electronAPI.pathJoin(
            userLocalesDir,
            'README.txt',
          );
          const readmeContent = `TRADUCTIONS - The Endless Sea
============================

Ce dossier contient les fichiers de traduction du jeu.

COMMENT AJOUTER UNE NOUVELLE LANGUE :
1. Copiez un fichier existant (par exemple fr.json)
2. Renommez-le avec le code de votre langue (ex: de.json pour l'allemand)
3. Modifiez les traductions √† l'int√©rieur
4. Relancez le jeu

LANGUES ACTUELLEMENT SUPPORT√âES :
- en.json : Anglais
- fr.json : Fran√ßais
- ru.json : Russe

Le jeu d√©tecte automatiquement tous les fichiers .json dans ce dossier.

Bonne traduction ! üåç
`;

          if (!(await electronAPI.existsSync(readmePath))) {
            await electronAPI.writeFileSync(readmePath, readmeContent);
            console.log('üìù Fichier README cr√©√© pour les utilisateurs');
          }
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Impossible de cr√©er le dossier utilisateur:', error);
      }
    }

    // Charger les traductions depuis le dossier utilisateur (priorit√©) puis application
    const result: Record<string, any> = {};

    // 1. Charger depuis le dossier utilisateur (priorit√©)
    if (await electronAPI.existsSync(userLocalesDir)) {
      try {
        const userFiles = (
          await electronAPI.readdirSync(userLocalesDir)
        ).filter((f: string) => f.endsWith('.json'));
        console.log('üë§ Fichiers utilisateur trouv√©s:', userFiles);

        for (const file of userFiles) {
          const code = file.replace(/\.json$/, '');
          try {
            const filePath = await electronAPI.pathJoin(userLocalesDir, file);
            const content = await electronAPI.readFile(filePath);
            if (content) {
              result[code] = {
                translation: JSON.parse(content),
              };
              console.log(
                `‚úÖ Langue ${code} charg√©e depuis le dossier utilisateur`,
              );
            }
          } catch (error) {
            console.warn(
              `‚ö†Ô∏è Erreur lors du chargement de ${file} (utilisateur):`,
              error,
            );
          }
        }
      } catch (error) {
        console.warn(
          '‚ö†Ô∏è Erreur lors de la lecture du dossier utilisateur:',
          error,
        );
      }
    }

    // 2. Charger depuis le dossier application (fallback pour les langues manquantes)
    if (await electronAPI.existsSync(appLocalesDir)) {
      try {
        const appFiles = (await electronAPI.readdirSync(appLocalesDir)).filter(
          (f: string) => f.endsWith('.json'),
        );
        console.log('üì¶ Fichiers application trouv√©s:', appFiles);

        for (const file of appFiles) {
          const code = file.replace(/\.json$/, '');
          // Ne charger que si pas d√©j√† charg√© depuis le dossier utilisateur
          if (!result[code]) {
            try {
              const filePath = await electronAPI.pathJoin(appLocalesDir, file);
              const content = await electronAPI.readFile(filePath);
              if (content) {
                result[code] = {
                  translation: JSON.parse(content),
                };
                console.log(
                  `‚úÖ Langue ${code} charg√©e depuis le dossier application`,
                );
              }
            } catch (error) {
              console.warn(
                `‚ö†Ô∏è Erreur lors du chargement de ${file} (application):`,
                error,
              );
            }
          }
        }
      } catch (error) {
        console.warn(
          '‚ö†Ô∏è Erreur lors de la lecture du dossier application:',
          error,
        );
      }
    }

    console.log('üåç Langues charg√©es:', Object.keys(result));
    return result;
  } else {
    // Web : fetch tous les fichiers connus
    console.log('üåê Mode Web d√©tect√©');
    const langs = ['en', 'fr', 'ru']; // Langues support√©es en web
    const result: Record<string, any> = {};

    for (const code of langs) {
      try {
        const resp = await fetch(`/locales/${code}.json`);
        if (resp.ok) {
          result[code] = { translation: await resp.json() };
          console.log(`‚úÖ Langue ${code} charg√©e depuis /locales/`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erreur lors du chargement de ${code}:`, error);
      }
    }

    console.log('üåê Langues charg√©es (web):', Object.keys(result));
    return result;
  }
}
