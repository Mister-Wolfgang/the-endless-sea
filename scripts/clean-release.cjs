const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const releaseDir = 'C:\\Users\\Wolfgang\\Releases\\The-Endless-Sea';

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function killElectronProcesses() {
  try {
    console.log('üîÑ Arr√™t des processus Electron...');
    execSync('taskkill /IM electron.exe /F', { stdio: 'ignore' });
  } catch (e) {
    // Processus d√©j√† arr√™t√©
  }

  try {
    execSync('taskkill /IM TheEndlessSea-Solo.exe /F', { stdio: 'ignore' });
  } catch (e) {
    // Processus d√©j√† arr√™t√©
  }

  // Attendre que les processus se ferment compl√®tement
  await sleep(2000);
}

async function forceUnlockFiles(dir) {
  try {
    // Utiliser handle.exe si disponible pour fermer les handles de fichiers
    execSync(`handle.exe -p ${process.pid} -nobanner -accepteula`, {
      stdio: 'ignore',
    });
  } catch (e) {
    // handle.exe n'est pas disponible, on continue
  }
}

async function removeDirectoryWithRetry(dir, maxRetries = 5) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      if (fs.existsSync(dir)) {
        console.log(
          `üóëÔ∏è  Tentative ${i + 1}/${maxRetries} de suppression de ${dir}...`,
        );

        // Forcer la fermeture des handles de fichiers
        await forceUnlockFiles(dir);

        // Essayer de changer les permissions avant suppression
        try {
          execSync(`attrib -R "${dir}\\*.*" /S`, { stdio: 'ignore' });
        } catch (e) {
          // Ignore si attrib √©choue
        }

        // Utiliser rmdir avec force sur Windows
        execSync(`rmdir /S /Q "${dir}"`, { stdio: 'ignore' });

        console.log(`‚úÖ Dossier ${dir} supprim√© avec succ√®s`);
        return;
      } else {
        console.log(`‚ÑπÔ∏è  Dossier ${dir} n'existe pas`);
        return;
      }
    } catch (error) {
      console.log(`‚ùå Tentative ${i + 1} √©chou√©e: ${error.message}`);

      if (i < maxRetries - 1) {
        console.log(
          `‚è≥ Attente de ${(i + 1) * 2} secondes avant nouvelle tentative...`,
        );
        await sleep((i + 1) * 2000);
      }
    }
  }

  console.log(
    `‚ö†Ô∏è  Impossible de supprimer ${dir} apr√®s ${maxRetries} tentatives`,
  );
  console.log(
    'üí° Solution manuelle: Fermer VSCode et autres √©diteurs, puis relancer la commande',
  );

  // Ne pas √©chouer le build, juste avertir
  console.log("üîÑ Continuation du build malgr√© l'√©chec du nettoyage...");
}

async function main() {
  console.log('üßπ D√©but du nettoyage...');

  await killElectronProcesses();
  await removeDirectoryWithRetry(releaseDir);

  console.log('‚ú® Nettoyage termin√©');
}

main().catch((error) => {
  console.error('‚ùå Erreur lors du nettoyage:', error);
  // Ne pas faire √©chouer le processus pour permettre au build de continuer
  process.exit(0);
});
